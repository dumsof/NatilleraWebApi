// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Natillera.DataAccess;

namespace Natillera.DataAccess.Migrations
{
    [DbContext(typeof(NatilleraDBContext))]
    partial class NatilleraDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "38e606c8-7f9e-4158-a671-444992bd89f5",
                            ConcurrencyStamp = "7a4b368f-4ad9-4dc8-abec-72ea4cf36db0",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "38e606c8-7f9e-4158-a671-444992bd89f5",
                            RoleId = "38e606c8-7f9e-4158-a671-444992bd89f5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Natillera.DataAccess.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SocioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SociosSocioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SociosSocioId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "38e606c8-7f9e-4158-a671-444992bd89f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52de73a0-39c6-42fa-a5c5-4da232483486",
                            Email = "dun34@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUN34@HOTMAIL.COM",
                            NormalizedUserName = "DUN34@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECokRB0Ykqax/BA+NyuGbiauAJ+X4Mcs1STYMpREdRcWXSLFDxcEtrLpGczPaZX6bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DVJF5PLZA76QHHTNVSJYRF5NVCQTSRTQ",
                            SocioId = new Guid("f95ba36f-daa0-4b14-a142-51ec51cf7d91"),
                            TwoFactorEnabled = false,
                            UserName = "dun34@hotmail.com"
                        });
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.ActividadRecaudoEntity", b =>
                {
                    b.Property<Guid>("ActividadRecaudoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("DescripcionActividad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRealizaActividad")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NatillerasNatilleraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RowCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RowUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("SociosSocioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorInvertido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorNetoGanancia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorRecaudado")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ActividadRecaudoId");

                    b.HasIndex("NatillerasNatilleraId");

                    b.HasIndex("SociosSocioId");

                    b.ToTable("ActividadesRecaudos");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.CuotaPrestamoEntity", b =>
                {
                    b.Property<Guid>("CuotaPrestamoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("DiasMora")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEsperaPago")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLimitePago")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PrestamoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RowCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RowUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("ValorCuota")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorDiasMora")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorInteres")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorNetoPagoCuota")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CuotaPrestamoId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("CuotasPrestamos");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.CuotaSocioEntity", b =>
                {
                    b.Property<Guid>("CuotaSocioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("FechaPagoCuota")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RowCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RowUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("SocioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorCuota")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorMulta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorTotalCuota")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CuotaSocioId");

                    b.HasIndex("SocioId");

                    b.ToTable("CuotasSocios");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.MenuEntity", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("DescripcionMenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdenamientoMenu")
                        .HasColumnType("int");

                    b.Property<string>("RutaUrlMenu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.MenuPermisoEntity", b =>
                {
                    b.Property<Guid>("MenuPermisoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Actualizar")
                        .HasColumnType("bit");

                    b.Property<string>("AspNetRolesId")
                        .HasColumnType("NVARCHAR(128)");

                    b.Property<bool>("Borrar")
                        .HasColumnType("bit");

                    b.Property<bool>("Crear")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SubMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ver")
                        .HasColumnType("bit");

                    b.HasKey("MenuPermisoId");

                    b.HasIndex("SubMenuId");

                    b.ToTable("MenuPermisos");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.MenuSubMenuEntity", b =>
                {
                    b.Property<Guid>("SubMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("DescripcionSubMenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdenamientoSubMenu")
                        .HasColumnType("int");

                    b.Property<string>("RutaUrlSubMenu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubMenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuSubMenu");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.NatilleraEntity", b =>
                {
                    b.Property<Guid>("NatilleraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiasGraciaMora")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInicioPagoCuota")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroCuotas")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("RowUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TipoPago")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorCuotaPagar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ValorMoraDiaFijo")
                        .HasColumnType("bit");

                    b.Property<decimal>("ValorMoraPagar")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("NatilleraId");

                    b.ToTable("Natilleras");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.NatilleraSocioEntity", b =>
                {
                    b.Property<Guid>("NatilleraSocioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("NatilleraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RowCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RowUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("SocioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NatilleraSocioId");

                    b.HasIndex("NatilleraId");

                    b.HasIndex("SocioId");

                    b.ToTable("NatilleraSocios");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.PrestamoEntity", b =>
                {
                    b.Property<Guid>("PrestamoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("FechaDesembolso")
                        .HasColumnType("datetime2");

                    b.Property<int>("PorcentajeInteres")
                        .HasColumnType("int");

                    b.Property<string>("ResponsablePagoPrestamo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("RowCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RowUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("SocioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorCuotasNatillaActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorPrestado")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PrestamoId");

                    b.HasIndex("SocioId");

                    b.ToTable("Prestamos");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.SocioEntity", b =>
                {
                    b.Property<Guid>("SocioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PrimerApellidos")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("RowCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RowUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SegundoApellidos")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("TipoDocumentoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SocioId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("Socios");

                    b.HasData(
                        new
                        {
                            SocioId = new Guid("f95ba36f-daa0-4b14-a142-51ec51cf7d91"),
                            Celular = "3112343434",
                            Direccion = "Dirección",
                            Email = "dun34@hotmail.com",
                            FechaNacimiento = new DateTime(1990, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Darwin",
                            NumeroDocumento = "11803053",
                            PrimerApellidos = "Urrutia",
                            RowCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowUpdated = new DateTime(2020, 7, 26, 5, 40, 28, 469, DateTimeKind.Local).AddTicks(2266),
                            SegundoApellidos = "mosquera",
                            Telefono = "2343434",
                            TipoDocumentoId = new Guid("ceb36362-6ebb-4649-ae51-48ee9f60892a")
                        });
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.TipoDocumentoEntity", b =>
                {
                    b.Property<Guid>("TipoDocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("TipoDocumentoId");

                    b.ToTable("TiposDocumentos");

                    b.HasData(
                        new
                        {
                            TipoDocumentoId = new Guid("ceb36362-6ebb-4649-ae51-48ee9f60892a"),
                            Descripcion = "Cédula"
                        },
                        new
                        {
                            TipoDocumentoId = new Guid("ba4b88fb-6ac5-4678-8de6-95925728dc67"),
                            Descripcion = "Tarjeta de Identidad"
                        },
                        new
                        {
                            TipoDocumentoId = new Guid("1e424d0f-622a-4ba4-9d11-aef931d89239"),
                            Descripcion = "Pasaporte"
                        });
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.TokenEntity", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaExpiraToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Natillera.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Natillera.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Natillera.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Natillera.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Natillera.DataAccess.ApplicationUser", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.SocioEntity", "Socios")
                        .WithMany()
                        .HasForeignKey("SociosSocioId");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.ActividadRecaudoEntity", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.NatilleraEntity", "Natilleras")
                        .WithMany()
                        .HasForeignKey("NatillerasNatilleraId");

                    b.HasOne("Natillera.DataAccessContract.Entidades.SocioEntity", "Socios")
                        .WithMany()
                        .HasForeignKey("SociosSocioId");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.CuotaPrestamoEntity", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.PrestamoEntity", "Prestamos")
                        .WithMany()
                        .HasForeignKey("PrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.CuotaSocioEntity", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.SocioEntity", "Socios")
                        .WithMany()
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.MenuPermisoEntity", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.MenuSubMenuEntity", "MenuSubMenu")
                        .WithMany()
                        .HasForeignKey("SubMenuId");
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.MenuSubMenuEntity", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.MenuEntity", "Menus")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.NatilleraSocioEntity", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.NatilleraEntity", "Natilleras")
                        .WithMany()
                        .HasForeignKey("NatilleraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Natillera.DataAccessContract.Entidades.SocioEntity", "Socios")
                        .WithMany()
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.PrestamoEntity", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.SocioEntity", "Socios")
                        .WithMany()
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Natillera.DataAccessContract.Entidades.SocioEntity", b =>
                {
                    b.HasOne("Natillera.DataAccessContract.Entidades.TipoDocumentoEntity", "TiposDocumentos")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
